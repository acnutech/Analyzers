//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Acnutech.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Acnutech.Analyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters do not need ref modifier if their value is not changed (e.g. they are not assigned a different value)..
        /// </summary>
        internal static string AnalyzerDescription {
            get {
                return ResourceManager.GetString("AnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is passed by &apos;ref&apos; but is never modified. Remove the &apos;ref&apos; modifier to simplify the API..
        /// </summary>
        internal static string AnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("AnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter does not need its ref modifier.
        /// </summary>
        internal static string AnalyzerTitle {
            get {
                return ResourceManager.GetString("AnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detects when a ref parameter&apos;s original value is never read before being assigned, suggesting replacement with an out parameter for clearer intent and better semantics..
        /// </summary>
        internal static string ConvertRefToOutParameterDiagnostic_Description {
            get {
                return ResourceManager.GetString("ConvertRefToOutParameterDiagnostic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is passed by &apos;ref&apos; but its original value is never read. Consider using &apos;out&apos; instead for clearer intent..
        /// </summary>
        internal static string ConvertRefToOutParameterDiagnostic_MessageFormat {
            get {
                return ResourceManager.GetString("ConvertRefToOutParameterDiagnostic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;ref&apos; with &apos;out&apos; when the original parameter value is unused.
        /// </summary>
        internal static string ConvertRefToOutParameterDiagnostic_Title {
            get {
                return ResourceManager.GetString("ConvertRefToOutParameterDiagnostic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detects when both branches of a conditional call the same method with identical signatures but different argument values.
        /// </summary>
        internal static string DuplicateMethodCallDiagnostic_Description {
            get {
                return ResourceManager.GetString("DuplicateMethodCallDiagnostic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; is called in both branches with different arguments..
        /// </summary>
        internal static string DuplicateMethodCallDiagnostic_MessageFormat {
            get {
                return ResourceManager.GetString("DuplicateMethodCallDiagnostic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Same method called in both branches with different arguments.
        /// </summary>
        internal static string DuplicateMethodCallDiagnostic_Title {
            get {
                return ResourceManager.GetString("DuplicateMethodCallDiagnostic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modern C# prefers tuple returns over out parameters for multiple return values. This makes the method signature clearer and allows for inline tuple deconstruction..
        /// </summary>
        internal static string OutParametersToTupleDiagnostic_Description {
            get {
                return ResourceManager.GetString("OutParametersToTupleDiagnostic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; can be refactored to return a tuple instead of using out parameters..
        /// </summary>
        internal static string OutParametersToTupleDiagnostic_MessageFormat {
            get {
                return ResourceManager.GetString("OutParametersToTupleDiagnostic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer returning a tuple over using out parameters in a void method.
        /// </summary>
        internal static string OutParametersToTupleDiagnostic_Title {
            get {
                return ResourceManager.GetString("OutParametersToTupleDiagnostic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggests converting a void method with a single out parameter into a method that returns the value directly.
        /// </summary>
        internal static string OutParameterToReturnDiagnostic_Description {
            get {
                return ResourceManager.GetString("OutParameterToReturnDiagnostic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; can be refactored to return a value directly instead of using an out parameter..
        /// </summary>
        internal static string OutParameterToReturnDiagnostic_MessageFormat {
            get {
                return ResourceManager.GetString("OutParameterToReturnDiagnostic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer return value over out parameter in void methods.
        /// </summary>
        internal static string OutParameterToReturnDiagnostic_Title {
            get {
                return ResourceManager.GetString("OutParameterToReturnDiagnostic_Title", resourceCulture);
            }
        }
    }
}
